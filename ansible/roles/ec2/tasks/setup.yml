---
- name: create default security group 
  ec2_group:
    name: "{{ ec2_security_group }}"
    region: "{{ ec2_region }}"
    description: https://github.com/ethereum/system-testing/wiki
    rules:
        # ssh
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ ec2_ip_access_range }}"
        # RPC control port
      - proto: tcp
        from_port: 20000
        to_port: 22999
        cidr_ip: "{{ ec2_ip_access_range }}"
        # ethereum incoming connection ports
      - proto: udp
        from_port: 30000
        to_port: 32999 
        cidr_ip: "{{ ec2_ip_access_range }}"
      - proto: tcp
        from_port: 30000
        to_port: 32999 
        cidr_ip: "{{ ec2_ip_access_range }}"
    rules_egress:
      - proto: all
        cidr_ip: "{{ ec2_ip_access_range }}"

- name: create security group for elastic search logger
  ec2_group:
    name: elarch
    region: "{{ ec2_region }}"
    description: https://github.com/ethereum/system-testing/wiki
    rules:
        # ssh
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ ec2_ip_access_range }}"
        # http 
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: "{{ ec2_ip_access_range }}"
        # incoming log events
      - proto: tcp
        from_port: 9200
        to_port: 9200
        cidr_ip: "{{ ec2_ip_access_range }}"


- name: import public key to access instances later 
  ec2_key: 
    region: "{{ ec2_region }}" 
    name: system-testing
    key_material: "{{ item }}"
  with_file: system-testing.pub


- name: start ec2 instances for bootstrapping node
  ec2:  
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_type }}" 
    image: "{{ ec2_image[ec2_region] }}" 
    wait: true 
    region: "{{ ec2_region }}"
    key_name: "{{ ec2_keypair }}"
    instance_tags:
        Name: "{{ item }}"
        Role: ST-bootstrap
    count_tag: 
        Name: "{{ item }}"
    exact_count: 1
    # WARNING: Enabling install via user_data will interfere with other ansible scripts. DO NOT USE! 
    # user_data: "#include https://get.docker.com"
  with_sequence: start=0 end={{ g_total_no_boot - 1 }} format=ST-boot-%05u

- name: start new ec2 instances for client hosts
  ec2:  
    group: "{{ ec2_security_group }}"
    instance_type: "{{ ec2_instance_type }}" 
    image: "{{ ec2_image[ec2_region] }}" 
    wait: false 
    region: "{{ ec2_region }}"
    key_name: "{{ ec2_keypair }}"
    instance_tags:
        Name: "{{ item }}"
        Role: ST-client-host
    count_tag: # exactly one instance with the given name
        Name: "{{ item }}"
    exact_count: 1
  with_sequence: start=0 end={{ g_total_no_hosts - 1 }} format=ST-host-%05u

- name: start ec2 instance for elasticsearch server 
  ec2:  
    group: ["{{ ec2_security_group }}", elarch] 
    instance_type: r3.xlarge # elarch needs a lot of RAM
    image: "{{ ec2_image[ec2_region] }}" 
    wait: true 
    region: "{{ ec2_region }}"
    key_name: "{{ ec2_keypair }}"
    instance_tags:
        Name: ST-elarch
        Role: ST-logserver
    count_tag: 
        Name: ST-elarch 
    exact_count: 1
